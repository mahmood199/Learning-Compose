import androidx.compose.animation.core.RepeatMode
import androidx.compose.animation.core.animateFloat
import androidx.compose.animation.core.infiniteRepeatable
import androidx.compose.animation.core.keyframes
import androidx.compose.animation.core.rememberInfiniteTransition
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.wrapContentSize
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material.Divider
import androidx.compose.material.MaterialTheme
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.res.vectorResource
import androidx.compose.ui.text.font.FontStyle
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import com.pratilipi.common.compose.resources.PersianRed
import com.pratilipi.mobile.android.R
import kotlinx.collections.immutable.PersistentList
import kotlinx.coroutines.delay

private const val QUOTES_INTERVAL: Long = 10000

@Composable
fun QuotesProgressLoader(
    quotes: PersistentList<String>,
    modifier: Modifier = Modifier,
) {
    val infiniteTransition = rememberInfiniteTransition(
        label = "QuotesLoaderTransition"
    )
    val size by infiniteTransition.animateFloat(
        initialValue = 0.5f,
        targetValue = 1f,
        animationSpec = infiniteRepeatable(
            animation = keyframes {
                durationMillis = 1000
            },
            repeatMode = RepeatMode.Reverse,
        ),
        label = "ZoomInZoomOutAnimation",
    )

    Column(
        modifier = modifier
            .fillMaxSize()
            .background(Color.Transparent)
            .padding(32.dp),
    ) {
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .weight(1f)
        ) {
            Box(
                modifier = Modifier
                    .wrapContentSize()
                    .clip(CircleShape)
                    .background(Color.Blue)
                    .padding(12.dp)
                    .align(Alignment.BottomCenter),
            ) {
                Box(
                    modifier = Modifier.size((24 * size).toInt().dp).background(Color.Red),
                )
            }
        }
        Divider(
            modifier = Modifier
                .padding(vertical = 16.dp)
                .fillMaxWidth(0.25f)
                .align(Alignment.CenterHorizontally)
        )
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .weight(1f)
        ) {
            if (quotes.isNotEmpty()) {
                var quotesIndex by remember {
                    mutableStateOf(0)
                }

                LaunchedEffect(Unit) {
                    for (i in 0..quotes.lastIndex) {
                        delay(QUOTES_INTERVAL)
                        quotesIndex = i
                    }
                }

                Text(
                    text = quotes[quotesIndex],
                    textAlign = TextAlign.Center,
                    style = MaterialTheme.typography.subtitle2,
                    fontStyle = FontStyle.Italic
                )
            }
        }
    }
}
